<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "./meta/hibernate-mapping-3.0.dtd">

<hibernate-mapping>
	<class name="ticketline.db.Auffuehrung" table="auffuehrung">
		<!-- BaseClass -->
		<meta attribute="extra-import">ticketline.db.Entity</meta>
		<meta attribute="extends">Entity</meta>

		<meta attribute="class-description">
			Unter einer Auffuehrung versteht man eine Darbietung einer
			Veranstaltung an einem bestimmten Datum, zu einer bestimmten
			Uhrzeit und in einem bestimmten Saal. Die Auffuehrung ist
			genau durch diese Daten (Datum, Uhrzeit und Saal) eindeutig
			definiert. Eine Auffuehrung ist natuerlich genau einer
			Veranstaltung zugeordnet. Von einer Veranstaltung koennen
			beliebig viele Auffuehrungen gemacht werden. Zusaetzlich
			wird fuer jede Auffuehrung ein Hinweis, ein Flag zum
			bestimmen, ob die Auffuehrung storniert wurde, und eine
			Preiskategorie (entweder Minimalpreis, Standardpreis oder
			Maximalpreis) gespeichert.
		</meta>

		<!-- PK, Properties -->
		<composite-id name="comp_id"
			class="ticketline.db.AuffuehrungKey" unsaved-value="any">
			<key-property name="datumuhrzeit" column="datumuhrzeit"
				type="java.sql.Timestamp" length="8">
				<meta attribute="field-description">
					Beginnzeit und Datum der Auffuehrung
				</meta>
			</key-property>

			<key-property name="saalbez" column="saalbez"
				type="java.lang.String" length="30">
				<meta attribute="field-description">
					~Saal.Bezeichnung
				</meta>
			</key-property>

			<key-property name="ortbez" column="ortbez"
				type="java.lang.String" length="30">
				<meta attribute="field-description">
					~Ort.Bezeichnung
				</meta>
			</key-property>

			<key-property name="ort" column="ort"
				type="java.lang.String" length="30">
				<meta attribute="field-description">~Ort.Ort</meta>
			</key-property>

		</composite-id>

		<property name="storniert" type="boolean" column="storniert"
			not-null="true" length="1">
			<meta attribute="field-description">
				true (storniert), false (nicht storniert)
			</meta>
		</property>
		<property name="preis" type="java.lang.String"
			not-null="true">
			<meta attribute="field-description">
				Preiskategorie: `0' = Mindestpreis, `1' = Standardpreis,
				`2' = Maximalpreis
			</meta>

			<column name="preis" length="1"
				check="preis IN ('0','1','2')" not-null="true" />
		</property>

		<property name="hinweis" type="java.lang.String"
			column="hinweis" length="200">

			<meta attribute="field-description">
				Hinweis zur Auffuehrung Darbietung einer Veranstaltung
				an einem bestimmten Ort zu einer bestimmten Zeit.
			</meta>
		</property>

		<!-- Associations -->
		<!-- derived association(s) for compound key -->
		<!-- bi-directional many-to-one association to Saal -->
		<many-to-one name="saal" class="ticketline.db.Saal"
			update="false" insert="false" cascade="save-update">
			<column name="saalbez" />
			<column name="ortbez" />
			<column name="ort" />
		</many-to-one>

		<!-- end of derived association(s) -->

		<!-- bi-directional one-to-many association to Belegung -->
		<set name="belegungen" lazy="false" inverse="true"
			cascade="none">
			<key>
				<column name="datumuhrzeit" />
				<column name="saalbez" />
				<column name="ortbez" />
				<column name="ort" />
			</key>
			<one-to-many class="ticketline.db.Belegung" />
		</set>
		<!-- bi-directional many-to-one association to Veranstaltung -->
		<many-to-one name="veranstaltung"
			class="ticketline.db.Veranstaltung" not-null="true"
			cascade="save-update">
			<column name="veranstbez" />
			<column name="veranstkat" />
		</many-to-one>

	</class>
</hibernate-mapping>