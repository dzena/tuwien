<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "./meta/hibernate-mapping-3.0.dtd">

<hibernate-mapping>
	<class name="ticketline.db.Transaktion" table="transaktion">
		<!-- BaseClass -->
		<meta attribute="extra-import">ticketline.db.Entity</meta>
		<meta attribute="extends">Entity</meta>
		<meta attribute="class-description">
			Eine Transaktion dokumentiert eine aktuelle Reservierung
			oder einen Verkauf, bzw. auch eine bereits stornierte
			Reservierung oder einen stornierten Verkauf fuer
			statistische Zwecke. Bei Reservierung bzw. Kauf von Karten
			in mehreren Kategorien oder Reihen wird jeweils eine eigene
			Transaktion angelegt. Jede Transaktion ist einer Belegung
			zugeordnet. Man kann also mehrere direkt hintereinander
			liegende Plaetze auf einmal reservieren bzw. kaufen. Die
			Transaktion wird durch die Nummer des Kunden, die Nummer des
			Mitarbeiters, das Datum der Transaktion und der Uhrzeit
			derselben eindeutig identifiziert. Wenn Plaetze reserviert
			werden, wird automatisch vom System eine Reservierungsnummer
			vergeben.
		</meta>
		

		<!-- PK, Properties -->
		<composite-id name="comp_id"
			class="ticketline.db.TransaktionKey" unsaved-value="any">
			<key-property name="datumuhrzeit" column="datumuhrzeit"
				type="java.sql.Timestamp" length="8" />
			<key-property name="kundennr" column="kundennr" type="int" />
			<key-property name="mitarbeiternr" column="mitarbeiternr"
				type="int" />
		</composite-id>

		<property name="verkauft" type="boolean" column="verkauft"
			not-null="true" length="1">
			<meta attribute="field-description">
				verkauft (TRUE) oder nicht verkauft (FALSE)
			</meta>
		</property>
		<property name="storniert" type="boolean" column="storniert"
			not-null="true" length="1">
			<meta attribute="field-description">
				storniert (TRUE) oder nicht storniert (FALSE)
			</meta>
		</property>
		<property name="resnr" type="int">
			<meta attribute="field-description">
				Nummer mit welcher sich der Kunde die reservierten
				Karten abholt; 0 &lt; Reservierungsnummer &lt;= 9999
			</meta>

			<column name="resnr" check="resnr BETWEEN 1 AND 9999"
				unique="true" />
		</property>
		<property name="preis" type="java.math.BigDecimal"
			column="preis" not-null="true" length="10">
			<meta attribute="field-description">
				Preis fuer Kategorie * AnzPlaetze *
				~TicketCard.Ermaessigung
			</meta>
		</property>
		<property name="startplatz" type="int" not-null="true">
			<meta attribute="field-description">
				erster Platz, der reserviert bzw. verkauft wurde;
				Startplatz > 0
			</meta>

			<column name="startplatz" check="startplatz > 0"
				not-null="true" />
		</property>
		<property name="anzplaetze" type="int" not-null="true">
			<meta attribute="field-description">
				Anzahl der Plaetze vom Startplatz weg; AnzPlaetze > 0
			</meta>

			<column name="anzplaetze" check="anzplaetze > 0"
				not-null="true" />
		</property>
		<property name="zahlart" type="java.lang.String"
			column="zahlart" length="20">
			<meta attribute="field-description">
				z.B.: bar, TicketCard, VISA...
			</meta>
		</property>

		<!-- Associations -->
		<!-- derived association(s) for compound key -->
		<!-- bi-directional many-to-one association to Kunde -->
		<many-to-one name="kunde" class="ticketline.db.Kunde"
			update="false" insert="false" cascade="save-update">
			<column name="kundennr" />
		</many-to-one>

		<!-- bi-directional many-to-one association to Mitarbeiter -->
		<many-to-one name="mitarbeiter"
			class="ticketline.db.Mitarbeiter" update="false" insert="false"
			cascade="save-update">
			<column name="mitarbeiternr" />
		</many-to-one>

		<!-- end of derived association(s) -->

		<!-- bi-directional many-to-one association to Belegung -->
		<many-to-one name="belegung" class="ticketline.db.Belegung"
			not-null="true" cascade="save-update">
			<column name="reihebez" />
			<column name="kategoriebez" />
			<column name="saalbez" />
			<column name="ortbez" />
			<column name="ort" />
			<column name="auffdatumuhrzeit" />
		</many-to-one>
		<!-- bi-directional many-to-one association to Ort -->
		<many-to-one name="ort" class="ticketline.db.Ort"
			not-null="true" cascade="save-update">
			<column name="verkaufsstelle" />
			<column name="verkaufsort" />
		</many-to-one>

	</class>
</hibernate-mapping>